`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type
) %>%
select(-where(~ is.logical(.))) %>%
filter(!Data %in% full_db$Data) -> result_db
result_db
db_mine
db_clientes %>%
select(name, cpf_cnpj, state_name, fantasy_name, branch_of_activity,
cep, phone, email, city_name, street_name, status, bank_name, agency,
account_dv, account_type) -> db_clientes_data
db_mine %>%
left_join(db_clientes_data, by = 'cpf_cnpj') -> final_db
final_db
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type
) %>%
select(-where(~ is.logical(.)))  -> result_db
result_db
result_db <- result_db %>%
mutate(
`Agência` = as.numeric(`Agência`),
`Conta DV` = as.numeric(`Conta DV`)
)
# Garante que Data está como character no formato yyyy-mm-dd em full_db ANTES de qualquer uso de full_db$Data
full_db <- full_db %>%
mutate(Data = as.character(format(ymd(Data), "%Y-%m-%d")))
full_db
result_db
result_db
result_db <- result_db %>%
mutate(
`Agência` = as.numeric(`Agência`),
`Conta DV` = as.numeric(`Conta DV`)
)
full_db
db_new %>%
filter(Status == 'Aprovada') %>%
rowwise() %>%
mutate(cpf_cnpj = format_cpf_cnpj(cpf_cnpj)) %>%
ungroup %>%
mutate(
date = substr(`Data e hora`, 1, 10) %>% dmy %>% format('%Y-%m-%d')  # <-- Apenas data, formato yyyy-mm-dd
) %>%
select(date, Bandeira, Valor, cpf_cnpj, nome, Tipo, `Numero Parcelas`, Id) %>%
rename(brand = Bandeira, value = Valor, installments = `Numero Parcelas`, payment_method = Tipo) %>%
distinct(Id, .keep_all = T)  -> db_mine
db_mine
db_clientes <- readxl::read_excel('Dados Clintes Inter.xlsx')
db_clientes %>%
select(name, cpf_cnpj, state_name, fantasy_name, branch_of_activity,
cep, phone, email, city_name, street_name, status, bank_name, agency,
account_dv, account_type) -> db_clientes_data
db_mine %>%
left_join(db_clientes_data, by = 'cpf_cnpj') -> final_db
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type
) %>%
select(-where(~ is.logical(.)))  -> result_db
result_db
full_db -> final_db_sheet
final_db_sheet
final_db_sheet
final_db_sheet %>% names
db_mine
db_mine %>%
left_join(db_clientes_data, by = 'cpf_cnpj') -> final_db
final_db
final_db
final_db %>% banes
final_db %>% nanes
final_db %>% names
db_mine %>%
left_join(db_clientes_data, by = 'cpf_cnpj') -> final_db
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type,
Id = Id
) %>%
select(-where(~ is.logical(.)))  -> result_db
result_db
result_db <- result_db %>%
mutate(
`Agência` = as.numeric(`Agência`),
`Conta DV` = as.numeric(`Conta DV`)
)
full_db -> final_db_sheet
final_db_sheet
final_db_sheet %>% names
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type,
Id = Id
) %>%
select(-where(~ is.logical(.)))  -> result_db
result_db
result_db
result_db$Data
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type,
Id = Id
) %>%
select(-where(~ is.logical(.))) %>%
mutate(Data = ymd(Data)) -> result_db
result_db
final_db_sheet
final_db_sheet
x <- 2
x
final_db_sheet <- result_db
final_db_sheet
# Salva localmente (opcional) com tratamento de erro
tryCatch({
writexl::write_xlsx(final_db_sheet, 'transaction_with_type_and_brand.xlsx')
}, error = function(e) {
message("Não foi possível salvar 'transaction_with_type_and_brand.xlsx'. O arquivo pode estar aberto ou protegido. Erro: ", e$message)
# Alternativamente, salve com outro nome:
alt_path <- paste0('transaction_with_type_and_brand_', format(Sys.time(), "%Y%m%d%H%M%S"), '.xlsx')
writexl::write_xlsx(result_db, alt_path)
message("Arquivo salvo como: ", alt_path)
})
# Escreve no Google Sheets (substitui a aba "Transações")
sheet_write(final_db_sheet, ss = sheet_id, sheet = "Página1")
setwd("C:/Users/viter/inter-scraping")
sheet_id = '1jT-q_aEqR9OxcfsYna8UAAwXauH3-9QiM4lI-l6hHYU'
setwd("C:/Users/vitor/inter-scraping")
sheet_id = '1jT-q_aEqR9OxcfsYna8UAAwXauH3-9QiM4lI-l6hHYU'
# Ler o arquivo Excel do Google Sheets com base no sheet_id
full_db <- read_sheet(ss = sheet_id, sheet = "Página1") %>%
select(-where(~ is.logical(.)))
# Transformar a coluna 'valor' em double, mas verificar se está no formato
# R$ ... e transformar para número
full_db %>%
mutate(Valor = str_remove(Valor, 'R\\$ '),
Valor = str_replace_all(Valor, '\\.', ''),  # Remove pontos
Valor = str_replace_all(Valor, ',', '.'),    # Substitui vírgula por ponto
Valor = as.numeric(Valor)) -> full_db
# Ler apenas os arquivos all_data... .csv no database
db_files = list.files('./database/', pattern = '\\.csv$', full.names = TRUE)
full_db
# Ler apenas os arquivos all_data... .csv no database
db_files = list.files('./database/', pattern = '\\.csv$', full.names = TRUE)
all_data = list()
for (db_file in db_files) {
file_name <- basename(db_file)
file_name_no_ext <- str_remove(file_name, "\\.csv$")
parts <- str_split(file_name_no_ext, "_", n = 3, simplify = TRUE)
cpf_cnpj <- parts[1]
nome <- parts[2]
df <- read_csv2(db_file, col_names = TRUE)
df$cpf_cnpj <- cpf_cnpj
df$nome <- nome
all_data[[length(all_data) + 1]] <- df
}
db_new <- bind_rows(all_data)
db_new
db_new %>%
filter(Status == 'Aprovada') %>%
rowwise() %>%
mutate(cpf_cnpj = format_cpf_cnpj(cpf_cnpj)) %>%
ungroup %>%
mutate(
date = substr(`Data e hora`, 1, 10) %>% dmy %>% format('%Y-%m-%d')  # <-- Apenas data, formato yyyy-mm-dd
) %>%
select(date, Bandeira, Valor, cpf_cnpj, nome, Tipo, `Numero Parcelas`, Id) %>%
rename(brand = Bandeira, value = Valor, installments = `Numero Parcelas`, payment_method = Tipo) %>%
distinct(Id, .keep_all = T)  -> db_mine
db_mine
db_mine %>% mutate(date = ymd(date))
db_mine %>% mutate(date = ymd(date)) %>% filter(date >= today() - 3)
db_mine %>% mutate(date = ymd(date)) %>% filter(date >= today() - 3) %>% mutate(date = as.character(date)) -> db_mine
db_mine
db_clientes <- readxl::read_excel('Dados Clintes Inter.xlsx')
db_clientes %>%
select(name, cpf_cnpj, state_name, fantasy_name, branch_of_activity,
cep, phone, email, city_name, street_name, status, bank_name, agency,
account_dv, account_type) -> db_clientes_data
db_mine %>%
left_join(db_clientes_data, by = 'cpf_cnpj') -> final_db
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type,
Id = Id
) %>%
select(-where(~ is.logical(.))) %>%
mutate(Data = ymd(Data)) -> result_db
result_db
result_db <- result_db %>%
mutate(
`Agência` = as.numeric(`Agência`),
`Conta DV` = as.numeric(`Conta DV`)
)
# Garante que Data está como character no formato yyyy-mm-dd em full_db ANTES de qualquer uso de full_db$Data
full_db <- full_db %>%
mutate(Data = as.character(format(ymd(Data), "%Y-%m-%d")))
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) -> final_db_sheet
full_db
# Ler o arquivo Excel do Google Sheets com base no sheet_id
full_db <- read_sheet(ss = sheet_id, sheet = "Página1") %>%
select(-where(~ is.logical(.)))
# Transformar a coluna 'valor' em double, mas verificar se está no formato
# R$ ... e transformar para número
full_db %>%
mutate(Valor = str_remove(Valor, 'R\\$ '),
Valor = str_replace_all(Valor, '\\.', ''),  # Remove pontos
Valor = str_replace_all(Valor, ',', '.'),    # Substitui vírgula por ponto
Valor = as.numeric(Valor)) -> full_db
full_db
full_db %>% mutate(Data = as.Date(Data))
# Transformar a coluna 'valor' em double, mas verificar se está no formato
# R$ ... e transformar para número
full_db %>%
mutate(Valor = str_remove(Valor, 'R\\$ '),
Valor = str_replace_all(Valor, '\\.', ''),  # Remove pontos
Valor = str_replace_all(Valor, ',', '.'),    # Substitui vírgula por ponto
Valor = as.numeric(Valor),
Data = as.Date(Data)
) -> full_db
full_db
result_db <- result_db %>%
mutate(
`Agência` = as.numeric(`Agência`),
`Conta DV` = as.numeric(`Conta DV`)
)
result_db
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) -> final_db_sheet
result_db <- result_db %>%
mutate(
`Agência` = as.numeric(`Agência`),
`Conta DV` = as.numeric(`Conta DV`)
)
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) -> final_db_sheet
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type,
Id = Id
) %>%
select(-where(~ is.logical(.))) %>%
mutate(Data = ymd(Data)) -> result_db
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) -> final_db_sheet
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) -> final_db_sheet
final_db_sheet
final_db_sheet %>% group_by(Id)
final_db_sheet %>% group_by(Id) %>% summarise(n = n())
final_db_sheet %>% group_by(Id) %>% summarise(n = n()) %>% arrange(-n)
result_db
result_dv
result_db
full_db
full_db %>%
full_join(result_db, by = names(.))
result_db
a = tibble(a = 1)
b = tibble(a = 1)
a
a %>% full_join(b)
final_db_sheet
final_db_sheet %>% group_by(Id) %>% mutate(n = n())
final_db_sheet %>% group_by(Id) %>% mutate(n = n()) %>% arrange(-n)
final_db_sheet %>% group_by(Id) %>% mutate(n = n()) %>% arrange(-n) %>% View
db_new
db_mine
# Ler o arquivo Excel do Google Sheets com base no sheet_id
full_db <- read_sheet(ss = sheet_id, sheet = "Página1") %>%
select(-where(~ is.logical(.)))
full_db
full_db %>% group_by(Id)
full_db %>% group_by(Id) %>% summarise(n = n())
full_db %>% group_by(Id) %>% mutate(n = n()) %>% arrange(-n)
full_db %>% group_by(Id) %>% mutate(n = n()) %>% arrange(-n) %>% View
# Transformar a coluna 'valor' em double, mas verificar se está no formato
# R$ ... e transformar para número
full_db %>%
mutate(Valor = str_remove(Valor, 'R\\$ '),
Valor = str_replace_all(Valor, '\\.', ''),  # Remove pontos
Valor = str_replace_all(Valor, ',', '.'),    # Substitui vírgula por ponto
Valor = as.numeric(Valor),
Data = as.Date(Data)
) -> full_db
full_db
full_db %>% group_by(Id) %>% mutate(n = n()) %>% arrange(-n) %>% View
db_mine
db_new %>%
filter(Status == 'Aprovada') %>%
rowwise() %>%
mutate(cpf_cnpj = format_cpf_cnpj(cpf_cnpj)) %>%
ungroup %>%
mutate(
date = substr(`Data e hora`, 1, 10) %>% dmy %>% format('%Y-%m-%d')  # <-- Apenas data, formato yyyy-mm-dd
) %>%
select(date, Bandeira, Valor, cpf_cnpj, nome, Tipo, `Numero Parcelas`, Id) %>%
rename(brand = Bandeira, value = Valor, installments = `Numero Parcelas`, payment_method = Tipo) %>%
distinct(Id, .keep_all = T)  -> db_mine
db_clientes <- readxl::read_excel('Dados Clintes Inter.xlsx')
db_clientes %>%
select(name, cpf_cnpj, state_name, fantasy_name, branch_of_activity,
cep, phone, email, city_name, street_name, status, bank_name, agency,
account_dv, account_type) -> db_clientes_data
db_mine %>%
left_join(db_clientes_data, by = 'cpf_cnpj') -> final_db
final_db %>%
transmute(
`CPF/CNPJ` = cpf_cnpj,
`Valor` = value,
`Data` = as.character(date),
`Column 10` = NA, # Substitua por coluna real se necessário
`Meio de Pagamento` = payment_method,
`Nº de Parcelas` = installments,
`Bandeira` = brand,
`Nome` = nome,
`UF` = state_name,
`Nome Fantasia` = fantasy_name,
`Ramo de Atividade` = branch_of_activity,
`CEP` = cep,
`Telefone` = phone,
`Email` = email,
`Cidade` = city_name,
`Logradouro` = street_name,
`Status` = status,
`Banco` = bank_name,
`Agência` = agency,
`Conta DV` = account_dv,
`Tipo de Conta` = account_type,
Id = Id
) %>%
select(-where(~ is.logical(.))) %>%
mutate(Data = ymd(Data)) -> result_db
result_db
final_db
final_db %>% group_by(Id) %>% mutate(n = n()) %>% arrange(-n) %>% View
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) %>%
distinct(Id, .keep_all = T) -> final_db_sheet
final_db_sheet
# O join agora funcionará pois ambos os lados têm Data como <character> no formato yyyy-mm-dd
full_db %>%
full_join(result_db, by = names(.)) %>%
distinct(Id, .keep_all = T) -> final_db_sheet
# Salva localmente (opcional) com tratamento de erro
tryCatch({
writexl::write_xlsx(final_db_sheet, 'transaction_with_type_and_brand.xlsx')
}, error = function(e) {
message("Não foi possível salvar 'transaction_with_type_and_brand.xlsx'. O arquivo pode estar aberto ou protegido. Erro: ", e$message)
# Alternativamente, salve com outro nome:
alt_path <- paste0('transaction_with_type_and_brand_', format(Sys.time(), "%Y%m%d%H%M%S"), '.xlsx')
writexl::write_xlsx(result_db, alt_path)
message("Arquivo salvo como: ", alt_path)
})
