load_packages <- function() {
message("Carregando pacotes default para projeto")
.packages = c(
'rbcb',
'extrafont',
'dplyr',
'tidyverse',
'Rblpapi',
'ipeadatar',
'readxl',
'ggrepel',
'quantmod',
'alphavantager',
'stringi',
'vroom',
'bizdays',
'tidyverse',
'lubridate'
)
for (package in .packages) {
suppressMessages(require(package, character.only = TRUE))
}
message("Lista de pacotes carregados...")
print(c(.packages))
try(detach("package:plm", unload = TRUE), silent = T)
}
load_packages()
library(googlesheets4)
setwd("C:/Users/servi/inter-scraping/")
sheet_id = "1xifF_tAlbRp7kHBQyDqehH2kfyv-KxRXZBHVmGcA5qU"
db <- read_sheet(sheet_id, sheet = "Database TPV")
new_db
new_db = read_csv('data.csv')
new_db
new_db
db_transformed
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) -> db_transformed
db_transformed
new_db = read_csv('data.csv')
new_db
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) -> db_transformed
db_transformed
arrange(Nome) -> db_final
load_packages <- function() {
message("Carregando pacotes default para projeto")
.packages = c(
'rbcb',
'extrafont',
'dplyr',
'tidyverse',
'Rblpapi',
'ipeadatar',
'readxl',
'ggrepel',
'quantmod',
'alphavantager',
'stringi',
'vroom',
'bizdays',
'tidyverse',
'lubridate'
)
for (package in .packages) {
suppressMessages(require(package, character.only = TRUE))
}
message("Lista de pacotes carregados...")
print(c(.packages))
try(detach("package:plm", unload = TRUE), silent = T)
}
load_packages()
library(googlesheets4)
setwd("C:/Users/servi/inter-scraping/")
sheet_id = "1xifF_tAlbRp7kHBQyDqehH2kfyv-KxRXZBHVmGcA5qU"
db <- read_sheet(sheet_id, sheet = "Database TPV")
new_db = read_csv('data.csv')
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) -> db_transformed
db_transformed
gs4_auth(path = "../credenciais/credenciais.json")
sheet_id = "1xifF_tAlbRp7kHBQyDqehH2kfyv-KxRXZBHVmGcA5qU"
db <- read_sheet(sheet_id, sheet = "Database TPV")
db <- read_sheet('TPV Final', sheet = "Database TPV")
gs4_auth()
gs4_auth(path = "../credenciais/credenciais.json")
sheet_id <- gs4_find("TPV Final")$id  # Busca pelo nome e retorna o ID
setwd("C:/Users/servi/inter-scraping/")
gs4_auth(path = "../credenciais/credenciais.json")
sheet_id <- gs4_find("TPV Final")$id  # Busca pelo nome e retorna o ID
gs4_auth(
path = "../credenciais/credenciais.json", # Caminho para o seu arquivo JSON
scopes = "https://www.googleapis.com/auth/spreadsheets"
)
sheet_id <- gs4_find("TPV Final")$id  # Busca pelo nome e retorna o ID
setwd("C:/Users/servi/inter-scraping/")
gs4_auth(
path = "../credenciais/credenciais.json",
scopes = "https://www.googleapis.com/auth/spreadsheets",
cache = ".secrets"
)
sheet_id <- gs4_find("TPV Final")$id  # Busca pelo nome e retorna o ID
setwd("C:/Users/servi/inter-scraping/")
sheet_id <- gs4_find("TPV Final")$id  # Busca pelo nome e retorna o ID
sheet_id <- gs4_find("TPV Final")$id  # Busca pelo nome e retorna o ID
sheet_id
db <- read_sheet(sheet_id, sheet = "Database TPV")
sheet_id
sheet_id
sheet_id[[1]]
sheet_id[1]
sheet_id[[1]]
sheet_id %>% unlist
sheet_id %>% unlist
sheet_id
sheet_id[1]
sheet_id[2]
db <- read_sheet(sheet_id[1], sheet = "Database TPV")
db <- read_sheet(sheet_id[1], sheet = "Cópia de Base (inter)")
db
db <- read_sheet(sheet_id[1], sheet = "Cópia de Base (inter)", skip = 3)
db
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) -> db_transformed
db_transformed
new_db
db
db_transformed
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) %>%
rename('CPF ou CNPJ' = 1) -> db_transformed
db_transformed
db
db %>% names
date_cols <- colnames(db_transformed)[2:ncol(db_transformed)]  # Excluindo a primeira coluna (CNPJ)
date_cols
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1]))
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value)
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value)
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons)
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0,
date = format(date, '%d/%m/%Y')) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) %>%
rename('CPF ou CNPJ' = 1) -> db_transformed
db_transformed
date_cols <- colnames(db_transformed)[2:ncol(db_transformed)]  # Excluindo a primeira coluna (CNPJ)
date_cols
date_cols
db_transformed
date_cols <- colnames(db_transformed)[3:ncol(db_transformed)]  # Excluindo a primeira coluna (CNPJ)
date_cols
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1])) %>%
# Atualizar os valores para cada coluna de data
mutate(across(all_of(date_cols),
~ coalesce(.data[[.col]], .data[[paste0(.col, ".y")]])))
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1]))
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1])) %>% names
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0,
date = format(date, '%d/%m/%Y')) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) %>%
select(-2) %>%
rename('CPF ou CNPJ' = 1) -> db_transformed
db_transformed
date_cols <- colnames(db_transformed)[2:ncol(db_transformed)]  # Excluindo a primeira coluna (CNPJ)
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1]))
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1])) %>% names
db %>%
# Realizar o join com df_grouped usando a coluna de CNPJ
left_join(db_transformed, by = c("CPF ou CNPJ" = colnames(db_transformed)[1])) %>%
# Atualizar os valores para cada coluna de data
mutate(across(all_of(date_cols),
~ coalesce(.data[[.col]], .data[[paste0(.col, ".y")]])))
View(db)
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_col))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>% view
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNOJ')
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ')
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>% View()
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 4]))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5]))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format('%d/%m/%Y'))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y'))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y')) %>%
spread(date, value)
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y')) %>%
spread(date, value) %>% View
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date)
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>% .$date %>% unique
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y'))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y')) %>%
mutate(date = factor(date, levels = .$date %>% unique))
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y')) %>%
mutate(date = factor(date, levels = .$date %>% unique)) %>%
spread(date, value) %>% View
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y')) %>%
mutate(date = factor(date, levels = .$date %>% unique)) %>%
spread(date, value) -> db_final
list(db_final)
data_to_update
range_name <- "A4"  # Define o intevalo de atualização
range_write(ss = sheet_id,
data = db_final,
sheet = "Cópia de Base (inter)",
range = range_name,
col_names = FALSE)
sheet_id
sheet_id <- gs4_find("TPV Final")$id[[1]]  # Busca pelo nome e retorna o ID
range_write(ss = sheet_id,
data = db_final,
sheet = "Cópia de Base (inter)",
range = range_name,
col_names = FALSE)
range_write(ss = sheet_id,
data = db_final,
sheet = "Cópia de Base (inter)",
range = range_name,
col_names = TRUE)
450/6
75*10
setwd("C:/Users/servi/inter-scraping/")
sheet_id <- gs4_find("TPV Final")$id[[1]]  # Busca pelo nome e retorna o ID
db <- read_sheet(sheet_id, sheet = "Base (inter)", skip = 3)
new_db = read_csv('data.csv')
new_db %>%
filter(value > 0) %>%
rename(Nome = name) %>%
distinct(`cpf/cnpj`, date, .keep_all = T) %>%
group_by(`cpf/cnpj`) %>%
mutate(had_transacitons = sum(value) > 0,
date = format(date, '%d/%m/%Y')) %>%
ungroup %>%
filter(had_transacitons) %>%
select(-had_transacitons) %>%
spread(date, value) %>%
select(-2) %>%
rename('CPF ou CNPJ' = 1) -> db_transformed
date_cols <- colnames(db_transformed)[2:ncol(db_transformed)]  # Excluindo a primeira coluna (CNPJ)
# Atualizar os valores das colunas de data em db
db %>%
select(-all_of(date_cols)) %>%
left_join(db_transformed, by = 'CPF ou CNPJ') %>%
gather(date, value, -c(names(.)[1: 5])) %>%
mutate(date = dmy(date)) %>%
arrange(date) %>%
mutate(date = format(date, '%d/%m/%Y')) %>%
mutate(date = factor(date, levels = .$date %>% unique)) %>%
spread(date, value) -> db_final
range_name <- "A4"  # Define o intevalo de atualização
range_write(ss = sheet_id,
data = db_final,
sheet = "Base (inter)",
range = range_name,
col_names = TRUE)
db <- read_sheet('1GpB1ed23HZhNKQciU3DSKC05ZowEirr0', sheet = "Base (inter)", skip = 3)
sheet_id
sheet_id <- gs4_find("TPV Final")$id[[2]]  # Busca pelo nome e retorna o ID
db <- read_sheet(sheet_id, sheet = "Base (inter)", skip = 3)
